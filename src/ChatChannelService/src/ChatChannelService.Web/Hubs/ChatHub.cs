using Microsoft.AspNetCore.Authorization;
using Microsoft.AspNetCore.SignalR;

namespace ChatChannelService.Web.Hubs;

[Authorize]
public class ChatHub : Hub
{
    // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–∏—Å–æ–µ–¥–∏–Ω—è–µ—Ç—Å—è –∫ –æ–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω–æ–º—É –∫–∞–Ω–∞–ª—É
    public async Task JoinChannel(string channelId)
    {
        await Groups.AddToGroupAsync(Context.ConnectionId, channelId);
        Console.WriteLine($"‚úÖ {Context.UserIdentifier} joined channel {channelId}");
    }

    // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–∫–∏–¥–∞–µ—Ç –∫–∞–Ω–∞–ª (–Ω–µ–æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ)
    public async Task LeaveChannel(string channelId)
    {
        await Groups.RemoveFromGroupAsync(Context.ConnectionId, channelId);
        Console.WriteLine($"üö™ {Context.UserIdentifier} left channel {channelId}");
    }

    // –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –∫–∞–Ω–∞–ª
    public async Task SendMessageToChannel(SendMessageRequest request)
    {
        var senderId = Context.UserIdentifier;

        // –ó–¥–µ—Å—å –º–æ–∂–Ω–æ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –ë–î (–µ—Å–ª–∏ –Ω—É–∂–Ω–æ)
        var message = new
        {
            id = Guid.NewGuid(),
            channelId = request.ChannelId,
            content = request.Content,
            senderId = senderId,
            senderUsername = request.SenderUsername,
            senderAvatarUrl = request.SenderAvatarUrl,
            sentAt = DateTime.UtcNow
        };

        // –û—Ç–ø—Ä–∞–≤–∫–∞ –≤—Å–µ–º —É—á–∞—Å—Ç–Ω–∏–∫–∞–º –≥—Ä—É–ø–ø—ã (–∫–∞–Ω–∞–ª–∞)
        await Clients.Group(request.ChannelId).SendAsync("ReceiveMessage", message);
    }

    public override Task OnConnectedAsync()
    {
        Console.WriteLine($"üîå Connected: {Context.ConnectionId}");
        return base.OnConnectedAsync();
    }

    public override Task OnDisconnectedAsync(Exception? exception)
    {
        Console.WriteLine($"‚ùå Disconnected: {Context.ConnectionId}");
        return base.OnDisconnectedAsync(exception);
    }
}

public class SendMessageRequest
{
    public string ChannelId { get; set; } = default!;
    public string SenderId { get; set; } = default!;
    public string Content { get; set; } = default!;

    // –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ UI
    public string SenderUsername { get; set; } = default!;
    public string? SenderAvatarUrl { get; set; }
}